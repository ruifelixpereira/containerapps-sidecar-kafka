targetScope = 'resourceGroup'

// ------------------
//    PARAMETERS
// ------------------

@description('The location where the resources will be created.')
param location string = resourceGroup().location

@description('Optional. The prefix to be used for all resources created by this template.')
param prefix string = ''

@description('Optional. The suffix to be used for all resources created by this template.')
param suffix string = ''

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

// Container Apps Env / Log Analytics Workspace / Application Insights
@description('Optional. The name of the container apps environment. If set, it overrides the name generated by the template.')
param containerAppsEnvironmentName string = '${prefix}cae-${uniqueString(resourceGroup().id)}${suffix}'

@description('Optional. The name of the log analytics workspace. If set, it overrides the name generated by the template.')
param logAnalyticsWorkspaceName string = '${prefix}log-${uniqueString(resourceGroup().id)}${suffix}'

// Services
@description('The name of the main app.')
param mainAppName string

@description('The name of the sidecar.')
param sidecarName string

// Event Hubs
@description('Optional. The name of the event hub namespace. If set, it overrides the name generated by the template.')
param eventHubNamespaceName string = '${prefix}eh-${uniqueString(resourceGroup().id)}${suffix}'

@description('The name of the event hub (topic).')
param eventHubName string = 'logger-events'

// Container Registry & Images
@description('The name of the container registry.')
param containerRegistryName string

@description('The image for the main app.')
param mainAppImage string

@description('The image for the sidecar.')
param sidecarImage string

// App Ports
@description('The target port for the main web app.')
param mainAppPortNumber int = 8080


// ------------------
// RESOURCES
// ------------------

module containerAppsEnvironment 'modules/container-apps-environment.bicep' ={
  name: 'containerAppsEnv-${uniqueString(resourceGroup().id)}'
  params: {
    containerAppsEnvironmentName: containerAppsEnvironmentName
    logAnalyticsWorkspaceName: logAnalyticsWorkspaceName
    location: location
    tags: tags
  }
}


module eventHub 'modules/event-hubs.bicep' = {
  name: 'eventHub-${uniqueString(resourceGroup().id)}'
  params: {
    eventHubNamespaceName: eventHubNamespaceName
    location: location
    tags: tags
    eventHubName: eventHubName
  }
}


module containerApps 'modules/container-apps.bicep' = {
  name: 'containerApps-${uniqueString(resourceGroup().id)}'
  params: {
    location: location
    tags: tags
    mainAppName: mainAppName
    sidecarName: sidecarName
    containerAppsEnvironmentId: containerAppsEnvironment.outputs.containerAppsEnvironmentId
    eventHubNamespaceName: eventHub.outputs.eventHubNamespace
    eventHubName: eventHub.outputs.eventHubName
    eventHubSendPolicyName: eventHub.outputs.eventHubSendPolicyName
    containerRegistryName: containerRegistryName
    mainAppImage: mainAppImage
    sidecarImage: sidecarImage
    mainAppPortNumber: mainAppPortNumber
  }
}

// ------------------
// OUTPUTS
// ------------------

@description('The name of the container app for the main app web service.')
output mainAppContainerAppName string = containerApps.outputs.mainAppContainerAppName

@description('The FQDN of the main web app')
output mainAppFQDN string  = containerApps.outputs.mainAppFQDN
